//
// Created by Nick Ray on EQ/NUM/RBRACE.
//

#ifndef SCANNER_TABLE_HPP
#define SCANNER_TABLE_HPP

#include "State.hpp"

State Table[50][24] = {
    {ID, NUM, INITIAL, EOF_, ERROR, ASSIGNOP, ID, COLON, ERROR, PLUS, MINUS, MULT, DIVIDE, MOD, SEMI, COMMA, DOT, LPAREN, RPAREN, LBRACE, RBRACE, LBRACKET, RBRACKET, CMT_ST_A},  // Initial
    {FINAL, FINAL, FINAL, FINAL, GTEQ, EQ, FINAL, COLONEQ, LTEQ, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL},       // ASSIGNOP
    {FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL},   // GTEQ
    {FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL},   // EQ
    {FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL},   // COLONEQ
    {FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL},   // LTEQ
    {ID, ID, FINAL, FINAL, FINAL, FINAL, ID, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, CMT_ST_A},      // ID
    {FINAL, NUM, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, CMT_ST_A},    // NUM
    {FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL},   // EOF
    {FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL},   // SEMI
    {FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL},   // PLUS
    {FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL},   // MINUS
    {FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL},   // MULT
    {FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL},   // DIVIDE
    {FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL},   // MOD
    {FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL},   // DOT
    {FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL},   // COMMA
    {FINAL, FINAL, FINAL, FINAL, FINAL, COLONEQ, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL},   // COLON
    {FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL},   // LPAREN
    {FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL},   // RPAREN
    {FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL},   // LBRACE
    {FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL},   // RBRACE
    {FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL},   // LBRACKET
    {FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL},   // RBRACKET
    {ERROR, ERROR, ERROR, ERROR, ERROR, ERROR, ERROR, ERROR, ERROR, ERROR, ERROR, ERROR, ERROR, ERROR, ERROR, ERROR, ERROR, ERROR, ERROR, ERROR, ERROR, ERROR, ERROR, CMT_ST_B},   // CMT_ST_A
    {CMT_ST_B, CMT_ST_B, CMT_ST_B, CMT_ST_B, CMT_ST_B, CMT_ST_B, CMT_ST_B, CMT_ST_B, CMT_ST_B, CMT_ST_B, CMT_ST_B, CMT_ST_B, CMT_ST_B, CMT_ST_B, CMT_ST_B, CMT_ST_B, CMT_ST_B, CMT_ST_B, CMT_ST_B, CMT_ST_B, CMT_ST_B, CMT_ST_B, CMT_ST_B, CMT_END_A},   // CMT_ST_B
    {CMT_ST_B, CMT_ST_B, CMT_ST_B, CMT_ST_B, CMT_ST_B, CMT_ST_B, CMT_ST_B, CMT_ST_B, CMT_ST_B, CMT_ST_B, CMT_ST_B, CMT_ST_B, CMT_ST_B, CMT_ST_B, CMT_ST_B, CMT_ST_B, CMT_ST_B, CMT_ST_B, CMT_ST_B, CMT_ST_B, CMT_ST_B, CMT_ST_B, CMT_ST_B, CMT_END_B},   // CMT_END_A
    {FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL, FINAL},   // CMT_END_B
    {ASSIGNOP, GTEQ, EQ, COLONEQ, LTEQ, ID, NUM, EOF_, SEMI, PLUS, MINUS, MULT, DIVIDE, MOD, DOT, COMMA, COLON, LPAREN, RPAREN, LBRACE, RBRACE, LBRACKET, RBRACKET, CMT_ST_A},            /* - Extras - */
    {ASSIGNOP, GTEQ, EQ, COLONEQ, LTEQ, ID, NUM, EOF_, SEMI, PLUS, MINUS, MULT, DIVIDE, MOD, DOT, COMMA, COLON, LPAREN, RPAREN, LBRACE, RBRACE, LBRACKET, RBRACKET, CMT_ST_A},
    {ASSIGNOP, GTEQ, EQ, COLONEQ, LTEQ, ID, NUM, EOF_, SEMI, PLUS, MINUS, MULT, DIVIDE, MOD, DOT, COMMA, COLON, LPAREN, RPAREN, LBRACE, RBRACE, LBRACKET, RBRACKET, CMT_ST_A},
    {ASSIGNOP, GTEQ, EQ, COLONEQ, LTEQ, ID, NUM, EOF_, SEMI, PLUS, MINUS, MULT, DIVIDE, MOD, DOT, COMMA, COLON, LPAREN, RPAREN, LBRACE, RBRACE, LBRACKET, RBRACKET, CMT_ST_A},
    {ASSIGNOP, GTEQ, EQ, COLONEQ, LTEQ, ID, NUM, EOF_, SEMI, PLUS, MINUS, MULT, DIVIDE, MOD, DOT, COMMA, COLON, LPAREN, RPAREN, LBRACE, RBRACE, LBRACKET, RBRACKET, CMT_ST_A},
    {ASSIGNOP, GTEQ, EQ, COLONEQ, LTEQ, ID, NUM, EOF_, SEMI, PLUS, MINUS, MULT, DIVIDE, MOD, DOT, COMMA, COLON, LPAREN, RPAREN, LBRACE, RBRACE, LBRACKET, RBRACKET, CMT_ST_A},
    {ASSIGNOP, GTEQ, EQ, COLONEQ, LTEQ, ID, NUM, EOF_, SEMI, PLUS, MINUS, MULT, DIVIDE, MOD, DOT, COMMA, COLON, LPAREN, RPAREN, LBRACE, RBRACE, LBRACKET, RBRACKET, CMT_ST_A},
    {ASSIGNOP, GTEQ, EQ, COLONEQ, LTEQ, ID, NUM, EOF_, SEMI, PLUS, MINUS, MULT, DIVIDE, MOD, DOT, COMMA, COLON, LPAREN, RPAREN, LBRACE, RBRACE, LBRACKET, RBRACKET, CMT_ST_A},
    {ASSIGNOP, GTEQ, EQ, COLONEQ, LTEQ, ID, NUM, EOF_, SEMI, PLUS, MINUS, MULT, DIVIDE, MOD, DOT, COMMA, COLON, LPAREN, RPAREN, LBRACE, RBRACE, LBRACKET, RBRACKET, CMT_ST_A},
    {ASSIGNOP, GTEQ, EQ, COLONEQ, LTEQ, ID, NUM, EOF_, SEMI, PLUS, MINUS, MULT, DIVIDE, MOD, DOT, COMMA, COLON, LPAREN, RPAREN, LBRACE, RBRACE, LBRACKET, RBRACKET, CMT_ST_A},
    {ASSIGNOP, GTEQ, EQ, COLONEQ, LTEQ, ID, NUM, EOF_, SEMI, PLUS, MINUS, MULT, DIVIDE, MOD, DOT, COMMA, COLON, LPAREN, RPAREN, LBRACE, RBRACE, LBRACKET, RBRACKET, CMT_ST_A},
    {ASSIGNOP, GTEQ, EQ, COLONEQ, LTEQ, ID, NUM, EOF_, SEMI, PLUS, MINUS, MULT, DIVIDE, MOD, DOT, COMMA, COLON, LPAREN, RPAREN, LBRACE, RBRACE, LBRACKET, RBRACKET, CMT_ST_A},
    {ASSIGNOP, GTEQ, EQ, COLONEQ, LTEQ, ID, NUM, EOF_, SEMI, PLUS, MINUS, MULT, DIVIDE, MOD, DOT, COMMA, COLON, LPAREN, RPAREN, LBRACE, RBRACE, LBRACKET, RBRACKET, CMT_ST_A},
    {ASSIGNOP, GTEQ, EQ, COLONEQ, LTEQ, ID, NUM, EOF_, SEMI, PLUS, MINUS, MULT, DIVIDE, MOD, DOT, COMMA, COLON, LPAREN, RPAREN, LBRACE, RBRACE, LBRACKET, RBRACKET, CMT_ST_A},
    {ASSIGNOP, GTEQ, EQ, COLONEQ, LTEQ, ID, NUM, EOF_, SEMI, PLUS, MINUS, MULT, DIVIDE, MOD, DOT, COMMA, COLON, LPAREN, RPAREN, LBRACE, RBRACE, LBRACKET, RBRACKET, CMT_ST_A},
    {ASSIGNOP, GTEQ, EQ, COLONEQ, LTEQ, ID, NUM, EOF_, SEMI, PLUS, MINUS, MULT, DIVIDE, MOD, DOT, COMMA, COLON, LPAREN, RPAREN, LBRACE, RBRACE, LBRACKET, RBRACKET, CMT_ST_A},
    {ASSIGNOP, GTEQ, EQ, COLONEQ, LTEQ, ID, NUM, EOF_, SEMI, PLUS, MINUS, MULT, DIVIDE, MOD, DOT, COMMA, COLON, LPAREN, RPAREN, LBRACE, RBRACE, LBRACKET, RBRACKET, CMT_ST_A},
    {ASSIGNOP, GTEQ, EQ, COLONEQ, LTEQ, ID, NUM, EOF_, SEMI, PLUS, MINUS, MULT, DIVIDE, MOD, DOT, COMMA, COLON, LPAREN, RPAREN, LBRACE, RBRACE, LBRACKET, RBRACKET, CMT_ST_A},
    {ASSIGNOP, GTEQ, EQ, COLONEQ, LTEQ, ID, NUM, EOF_, SEMI, PLUS, MINUS, MULT, DIVIDE, MOD, DOT, COMMA, COLON, LPAREN, RPAREN, LBRACE, RBRACE, LBRACKET, RBRACKET, CMT_ST_A},
    {ASSIGNOP, GTEQ, EQ, COLONEQ, LTEQ, ID, NUM, EOF_, SEMI, PLUS, MINUS, MULT, DIVIDE, MOD, DOT, COMMA, COLON, LPAREN, RPAREN, LBRACE, RBRACE, LBRACKET, RBRACKET, CMT_ST_A},            /* - - - */
    {ASSIGNOP, GTEQ, EQ, COLONEQ, LTEQ, ID, NUM, EOF_, SEMI, PLUS, MINUS, MULT, DIVIDE, MOD, DOT, COMMA, COLON, LPAREN, RPAREN, LBRACE, RBRACE, LBRACKET, RBRACKET, CMT_ST_A},            // FINAL
    {ASSIGNOP, GTEQ, EQ, COLONEQ, LTEQ, ID, NUM, EOF_, SEMI, PLUS, MINUS, MULT, DIVIDE, MOD, DOT, COMMA, COLON, LPAREN, RPAREN, LBRACE, RBRACE, LBRACKET, RBRACKET, CMT_ST_A},            // FINAL
};

int getTransitionFromChar(char c);

#endif //SCANNER_TABLE_HPP
